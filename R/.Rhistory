x <- c(1,3, 5)
y <- c(3, 2, 10)
cbind(x, y)
x <- c(4, "a", TRUE)
x<-4
class()x
class(x)
x <- list(2, "a", "b", TRUE)
x[[2]]
x <- 1:4
y <- 2
x+y
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x > 10] == 4
x[x >= 11] <- 4
hw1_data <- read.csv("~/Git/datasciencecoursera/R/hw1_data.csv")
View(hw1_data)
hw1_data[1:2]
hw1_data[,1:2]
hw1_data[[,1:2]]
hw1_data[[1:2]]
hw1_data[[1:2,]]
hw1_data[[1]]
hw1_data[1]
hw1_data[,1]
hw1_data[1:2]
hw1_data[:,1:2]
hw1_data[1:6,1:2]
hw1_data[1:2,1:6]
hw1_data[153:154,1:6]
hw1_data[152:153,1:6]
hw1_data[47,1]
hw1_data[,1]
hw1_data[1]
is.na(hw1_data[1])
q16<-is.na(hw1_data[1])
q16<-is.na(hw1_data[1])==FALSE
q16<-is.na(hw1_data[1])
q16<-is.na(hw1_data[1])
q16<-cmplete.cases(hw1_data[1])
q16<-complete.cases(hw1_data[1])
q16<-hw1_data[1]
complete.cases(q16)
q16
colSums(is.na(x))
colSums(is.na(q16))
mean(q16)
q19<-mean(q16,na.rm=TRUE)
q19<-mean(hw1_dat[1],na.rm=TRUE)
q19<-mean(hw1_data[1],na.rm=TRUE)
q19<-mean(hw1_data[[1]],na.rm=TRUE)
hw1_data[1]
hw1_data[1]>31
q18 <- subset(hw1_data, Ozone > 31 | Temp > 90)
q18b<-mean(q18[[1]],na.rm=TRUE)
q18b<-mean(q18[[2]],na.rm=TRUE)
q18b<-mean(q18[[2]])
q18b<-mean(q18[[2]],na.rm=TRUE)
View(`q18`)
q18b<-mean(q18[[3]],na.rm=TRUE)
q18b<-mean(Solar.R,na.rm=TRUE)
q18b<-mean(q18[[3]],na.rm=TRUE)
q18[[3]]
q18b<-mean(q18[[2]],na.rm=TRUE)
q18 <- subset(hw1_data, Ozone > 31 & Temp > 90)
q18b<-mean(q18[[2]],na.rm=TRUE)
q19 <- subset(hw1_data, Temp == 6)
q19 <- subset(hw1_data, Month == 6)
q19b<-mean(q19[[4]],na.rm=TRUE)
q20 <- subset(hw1_data, Month == 5)
q19b<-max(q20[[1]],na.rm=TRUE)
q20b<-max(q20[[1]],na.rm=TRUE)
add2 <- function(x,y) {
x + y
}
add2(1,2)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i])
}
means
}
columnmean(airquality)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i], na.rm = removeNA)
}
means
}
columnmean(airquality)
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i], na.rm = removeNA)
}
means
}
columnmean(airquality)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
`001` <- read.csv("~/Git/datasciencecoursera/R/specdata/001.csv")
View(`001`)
pollutantmean("/Home/Git/datasciencecoursera/R/specdata")
pollutantmean("/Home/Git/datasciencecoursera/R/specdata")
files <- dir(directory, pattern = '\\.csv', full.names = TRUE)
directory<-"/Home/Git/datasciencecoursera/R/specdata"
files <- dir(directory, pattern = '\\.csv', full.names = TRUE)
tables <- lapply(files, read.csv)
do.call(rbind, tables)
directory<-"/Home/Git/datasciencecoursera/R/specdata"
files <- dir(directory, pattern = '\\.csv', full.names = TRUE)
tables <- lapply(files, read.csv)
do.call(rbind, tables)
setwd("/Home/Git/datasciencecoursera/R/specdata")
directory<-'specdata'
files <- dir(directory, pattern = '\\.csv', full.names = TRUE)
tables <- lapply(files, read.csv)
do.call(rbind, tables)
setwd("/Home/Git/datasciencecoursera/R/specdata")
setwd("~/Git/datasciencecoursera/R/specdata")
directory<-"~/Git/datasciencecoursera/R/specdata"
files <- dir(directory, pattern = '\\.csv', full.names = TRUE)
tables <- lapply(files, read.csv)
do.call(rbind, tables)
tables
id<-1
tables[tables$fct %in% id,]
tables[tables$fct %in% ID==id,]
tables[tables$fct %in% 'ID'==id,]
q20 <- subset(hw1_data, Month == 5)
week2 <- subset(tables, ID == id)
week2 <- subset(001, ID == id)
week2 <- subset(tables, ID == 1)
`001` <- read.csv("~/Git/datasciencecoursera/R/specdata/001.csv")
View(`001`)
week2 <- subset(001, ID == id)
names(001)
names(tables)
x.df <- data.frame(tables)
x.df <- data.frame(001)
names(001)
names(x)
names(x.df)
temp = list.files(pattern="*.csv")
named.list <- lapply(temp, read.csv)
library(data.table)
files.matrix <-rbindlist(named.list)
as.data.frame.matrix(tables)
as.data.frame.matrix(named.list)
temp = list.files(pattern="*.csv")
named.list <- lapply(temp, read.csv)
library(data.table)
files.matrix <-rbindlist(named.list)
names(named.list)
id = 1:332
dat = read.csv("001.csv", header = TRUE)
names(dat)
setwd(directory)
data <- lapply(dir(),read.csv)
names(data)
data[1]
names(data[1])
data[1,1]
data[1,]
data[1,]
mean(Data[,pollutant],na.rm=TRUE)
pollutantmean(specdata,'nitrate',1:10)
setwd("~/Git/datasciencecoursera/R")
pollutantmean(specdata,'nitrate',1:10)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
#set the path
path = directory
#get the file List in that directory
fileList = list.files(path)
#extract the file names and store as numeric for comparison
file.names = as.numeric(sub("\\.csv$","",fileList))
#select files to be imported based on the user input or default
selected.files = fileList[match(id,file.names)]
#import data
Data = lapply(file.path(path,selected.files),read.csv)
#convert into data frame
Data = do.call(rbind.data.frame,Data)
#calculate mean
mean(Data[,pollutant],na.rm=TRUE)
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
}
pollutantmean(specdata,'nitrate',1:10)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
#set the path
path = directory
setwd(path)
#get the file List in that directory
fileList = list.files(path)
#extract the file names and store as numeric for comparison
file.names = as.numeric(sub("\\.csv$","",fileList))
#select files to be imported based on the user input or default
selected.files = fileList[match(id,file.names)]
#import data
Data = lapply(file.path(path,selected.files),read.csv)
#convert into data frame
Data = do.call(rbind.data.frame,Data)
#calculate mean
mean(Data[,pollutant],na.rm=TRUE)
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
}
pollutantmean(specdata,'nitrate',1:10)
pollutantmean('specdata','nitrate',1:10)
pollutantmean(specdata,'nitrate',1:10)
#get the file List in that directory
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
#set the path
path = directory
#get the file List in that directory
fileList = list.files(path)
#extract the file names and store as numeric for comparison
file.names = as.numeric(sub("\\.csv$","",fileList))
#select files to be imported based on the user input or default
selected.files = fileList[match(id,file.names)]
#import data
Data = lapply(file.path(path,selected.files),read.csv)
#convert into data frame
Data = do.call(rbind.data.frame,Data)
#calculate mean
mean(Data[,pollutant],na.rm=TRUE)
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
}
pollutantmean(specdata,'nitrate',1:10)
list.files(specdata)
list.files('specdata'')
filelist = list.files('specdata'')
filelist = list.files('specdata')
filelist <- list.files('specdata')
directory
file.names <- list.files(directory)
file.names[2]
file.numbers <- as.numeric(sub('\\.csv$','', file.names))
id=10
selected.files <- na.omit(file.names[match(id, file.numbers)])
id=1:10
selected.files <- na.omit(file.names[match(id, file.numbers)])
selected.dfs <- lapply(file.path(directory,selected.files), read.csv)
mean(c(sapply(selected.dfs, function(x) x[ ,pollutant])), na.rm=TRUE)
pollutant = 'nitrate'
mean(c(sapply(selected.dfs, function(x) x[ ,pollutant])), na.rm=TRUE)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
file.names <- list.files(directory)
file.numbers <- as.numeric(sub('\\.csv$','', file.names))
selected.files <- na.omit(file.names[match(id, file.numbers)])
selected.dfs <- lapply(file.path(directory,selected.files), read.csv)
mean(c(sapply(selected.dfs, function(x) x[ ,pollutant])), na.rm=TRUE)
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
}
pollutantmean(specdata,'nitrate',1:10)
pollutantmean('specdata,'nitrate',1:10)
pollutantmean('specdata','nitrate',1:10)
pollutantmean('specdata','nitrate',c(1:100,141))
selected.dfs
q19b<-mean(selected.dfs[[4]],na.rm=TRUE)
selected.dfs
selected.dfs[,'nitrate']
selected.dfs[[],'nitrate']]
selected.dfs[1]
selected.dfs[1,1]
names(selected.dfs)
pollutantmean('specdata','nitrate',1)
id=1
file.names <- list.files(directory)
file.numbers <- as.numeric(sub('\\.csv$','', file.names))
selected.files <- na.omit(file.names[match(id, file.numbers)])
selected.dfs <- lapply(file.path(directory,selected.files), read.csv)
mean(c(sapply(selected.dfs, function(x) x[ ,pollutant])), na.rm=TRUE)
id=1:10
file.names <- list.files(directory)
file.numbers <- as.numeric(sub('\\.csv$','', file.names))
selected.files <- na.omit(file.names[match(id, file.numbers)])
selected.dfs <- lapply(file.path(directory,selected.files), read.csv)
mean(c(sapply(selected.dfs, function(x) x[ ,pollutant])), na.rm=TRUE)
id=1
file.names <- list.files(directory)
file.numbers <- as.numeric(sub('\\.csv$','', file.names))
selected.files <- na.omit(file.names[match(id, file.numbers)])
selected.dfs <- lapply(file.path(directory,selected.files), read.csv)
mean(c(sapply(selected.dfs, function(x) x[ ,pollutant])), na.rm=TRUE)
names(selected.dfs)
selected.dfs
selected.dfs[ ,pollutant]
file.names <- list.files(directory)
file.numbers <- as.numeric(sub('\\.csv$','', file.names))
selected.files <- na.omit(file.names[match(id, file.numbers)])
selected.dfs <- lapply(file.path(directory,selected.files), read.csv)
mean(c(sapply(selected.dfs, function(x) x[ ,pollutant])), na.rm=TRUE)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
data = lapply(id, function(i) read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"), ".csv", sep = ""))[[pollutant]])
return(mean(unlist(data), na.rm = TRUE))
}
pollutantmean('specdata','nitrate',1)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
data = lapply(id, function(i) read.csv(paste(directory, "\", formatC(i, width = 3, flag = "0"), ".csv", sep = ""))[[pollutant]])
return(mean(unlist(data), na.rm = TRUE))
}
pollutantmean('specdata','nitrate',1)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating the location of
## the CSV files
## 'pollutant' is a character vector of length 1 indicating the name of the
## pollutant for which we will calculate the mean; either 'sulfate' or
## 'nitrate'.
## 'id' is an integer vector indicating the monitor ID numbers to be used
## Return the mean of the pollutant across all monitors list in the 'id'
## vector (ignoring NA values)
data = numeric()
for (i in id) {
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),
".csv", sep = ""))
data = c(data, newRead[[pollutant]])
}
return(mean(data, na.rm = TRUE))
}
pollutantmean("specdata", "nitrate", 23)
pollutantmean('specdata','nitrate',1)
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
setwd("~/Git/datasciencecoursera/R")
submit()
submit()
submit()
submit()
pollutantmean('specdata','nitrate',1)
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating the location of
## the CSV files
## 'id' is an integer vector indicating the monitor ID numbers to be used
## Return a data frame of the form: id nobs 1 117 2 1041 ...  where 'id' is
## the monitor ID number and 'nobs' is the number of complete cases
nobs = numeric()
for (i in id) {
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),
".csv", sep = ""))
nobs = c(nobs, sum(complete.cases(newRead)))
}
return(data.frame(id, nobs))
}
submit()
submit()
submit()
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating the location of
## the CSV files
## 'threshold' is a numeric vector of length 1 indicating the number of
## completely observed observations (on all variables) required to compute
## the correlation between nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
df = complete(directory)
ids = df[df["nobs"] > threshold, ]$id
corrr = numeric()
for (i in ids) {
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),
".csv", sep = ""))
dff = newRead[complete.cases(newRead), ]
corrr = c(corrr, cor(dff$sulfate, dff$nitrate))
}
return(corrr)
}
submit()
submit()
10
submit()
submit()
