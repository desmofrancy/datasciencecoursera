x <- c(1,3, 5)
y <- c(3, 2, 10)
cbind(x, y)
x <- c(4, "a", TRUE)
x<-4
class()x
class(x)
x <- list(2, "a", "b", TRUE)
x[[2]]
x <- 1:4
y <- 2
x+y
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x > 10] == 4
x[x >= 11] <- 4
hw1_data <- read.csv("~/Git/datasciencecoursera/R/hw1_data.csv")
View(hw1_data)
hw1_data[1:2]
hw1_data[,1:2]
hw1_data[[,1:2]]
hw1_data[[1:2]]
hw1_data[[1:2,]]
hw1_data[[1]]
hw1_data[1]
hw1_data[,1]
hw1_data[1:2]
hw1_data[:,1:2]
hw1_data[1:6,1:2]
hw1_data[1:2,1:6]
hw1_data[153:154,1:6]
hw1_data[152:153,1:6]
hw1_data[47,1]
hw1_data[,1]
hw1_data[1]
is.na(hw1_data[1])
q16<-is.na(hw1_data[1])
q16<-is.na(hw1_data[1])==FALSE
q16<-is.na(hw1_data[1])
q16<-is.na(hw1_data[1])
q16<-cmplete.cases(hw1_data[1])
q16<-complete.cases(hw1_data[1])
q16<-hw1_data[1]
complete.cases(q16)
q16
colSums(is.na(x))
colSums(is.na(q16))
mean(q16)
q19<-mean(q16,na.rm=TRUE)
q19<-mean(hw1_dat[1],na.rm=TRUE)
q19<-mean(hw1_data[1],na.rm=TRUE)
q19<-mean(hw1_data[[1]],na.rm=TRUE)
hw1_data[1]
hw1_data[1]>31
q18 <- subset(hw1_data, Ozone > 31 | Temp > 90)
q18b<-mean(q18[[1]],na.rm=TRUE)
q18b<-mean(q18[[2]],na.rm=TRUE)
q18b<-mean(q18[[2]])
q18b<-mean(q18[[2]],na.rm=TRUE)
View(`q18`)
q18b<-mean(q18[[3]],na.rm=TRUE)
q18b<-mean(Solar.R,na.rm=TRUE)
q18b<-mean(q18[[3]],na.rm=TRUE)
q18[[3]]
q18b<-mean(q18[[2]],na.rm=TRUE)
q18 <- subset(hw1_data, Ozone > 31 & Temp > 90)
q18b<-mean(q18[[2]],na.rm=TRUE)
q19 <- subset(hw1_data, Temp == 6)
q19 <- subset(hw1_data, Month == 6)
q19b<-mean(q19[[4]],na.rm=TRUE)
q20 <- subset(hw1_data, Month == 5)
q19b<-max(q20[[1]],na.rm=TRUE)
q20b<-max(q20[[1]],na.rm=TRUE)
install.packages("swirl")
library(swirl)
swirl()
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
source('~/Assignement3.R')
1=1
1+1
setwd("~/Git/datasciencecoursera/R/rprog-data-ProgAssignment3-data")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
source('~/Assignement3.R')
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
source('~/.active-rstudio-document')
head(outcome)
head(outcome)
ncol(outcome)
source('~/.active-rstudio-document')
ncol(outcome)
nrow(outcome)
source('~/.active-rstudio-document')
names(outcome)
source('~/.active-rstudio-document')
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
source('~/.active-rstudio-document')
hist(outcome[, 11])
outcome
head(outcome)
names(outcome)
outcome[, 11] <- as.numeric(outcome[, 11])
outcome[, 7]
q19 <- subset(outcome, State == "TX")
q19 <- subset(outcome, State == "AA")
str(q19)
data.frame(q.19)
check.rows(q.19)
check.rows(q19)
data.frame(q19)
object.size(q19)
head(q19)
str(q19)
setwd("~/Git/datasciencecoursera/R/rprog-data-ProgAssignment3-data")
source('~/Git/datasciencecoursera/R/rprog-data-ProgAssignment3-data/best.R')
setwd("~/Git/datasciencecoursera/R/rprog-data-ProgAssignment3-data")list.files()# helper function for getting the hospital namehelper <- function(data, col_num, state) {  state_subset <- data[data[, 7]==state, ]  outcome_arr <- state_subset[, col_num]  min <- min(outcome_arr, na.rm=T)  min_index <- which(outcome_arr == min)  hosp_name <- state_subset[min_index, 2]  return(hosp_name)}best <- function(state, outcome) {  ## Read outcome data  ## Check that state and outcome are valid  ## Return hospital name in that state with lowest 30-day death  ## rate    # read the data file  directory <- "./data/outcome-of-care-measures.csv"  data <- read.csv(directory, colClasses="character")  # change data type from character to numeric  data[, 11] <- as.numeric(data[, 11]) # heart attack  data[, 17] <- as.numeric(data[, 17]) # heart failure  data[, 23] <- as.numeric(data[, 23]) # pneumonia  valid_outcomes <- c("heart attack", "heart failure", "pneumonia")  if (!state %in% data$State) {    stop("invalid state")  } else if(!outcome %in% valid_outcomes) {    stop("invalid outcome")  } else {    if(outcome == "heart attack") {      hosp_name <- helper(data, 11, state)    } else if(outcome == "heart failure") {      hosp_name <- helper(data, 17, state)    } else {      hosp_name <- helper(data, 23, state)    }    result <- hosp_name    return(result)  }}# tests#best("TX", "heart attack")#best("TX", "heart failure")#best("MD", "heart attack")#best("MD", "pneumonia")#best("BB", "heart attack")
best("TX", "heart attack")
setwd("~/Git/datasciencecoursera/R/rprog-data-ProgAssignment3-data")list.files()
source('~/Git/datasciencecoursera/R/rprog-data-ProgAssignment3-data/best.R')
setwd("~/Git/datasciencecoursera/R/rprog-data-ProgAssignment3-data")
list.files()
source('~/Git/datasciencecoursera/R/rprog-data-ProgAssignment3-data/best.R')
helper <- function(data, col_num, state) {  state_subset <- data[data[, 7]==state, ]  outcome_arr <- state_subset[, col_num]  min <- min(outcome_arr, na.rm=T)  min_index <- which(outcome_arr == min)  hosp_name <- state_subset[min_index, 2]  return(hosp_name)}
source('~/Git/datasciencecoursera/R/rprog-data-ProgAssignment3-data/best.R')
source('~/Git/datasciencecoursera/R/rprog-data-ProgAssignment3-data/best.R')
best("TX", "heart attack")
setwd("~/Git/datasciencecoursera/R/rprog-data-ProgAssignment3-data")
setwd("~/Git/datasciencecoursera/R/rprog-data-ProgAssignment3-data")
best <- function(state, outcome) {  ## Read outcome data  ## Check that state and outcome are valid  ## Return hospital name in that state with lowest 30-day death  ## rate    # read the data file  directory <- ".~/Git/datasciencecoursera/R/rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv"  data <- read.csv(directory, colClasses="character")  # change data type from character to numeric  data[, 11] <- as.numeric(data[, 11]) # heart attack  data[, 17] <- as.numeric(data[, 17]) # heart failure  data[, 23] <- as.numeric(data[, 23]) # pneumonia  valid_outcomes <- c("heart attack", "heart failure", "pneumonia")  if (!state %in% data$State) {    stop("invalid state")  } else if(!outcome %in% valid_outcomes) {    stop("invalid outcome")  } else {    if(outcome == "heart attack") {      hosp_name <- helper(data, 11, state)    } else if(outcome == "heart failure") {      hosp_name <- helper(data, 17, state)    } else {      hosp_name <- helper(data, 23, state)    }    result <- hosp_name    return(result)  }}# tests#best("TX", "heart attack")#best("TX", "heart failure")#best("MD", "heart attack")#best("MD", "pneumonia")#best("BB", "heart attack")
best("TX", "heart attack")
source('~/Git/datasciencecoursera/R/rprog-data-ProgAssignment3-data/best.R')
best("TX", "heart attack")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
source('~/Git/datasciencecoursera/R/rprog-data-ProgAssignment3-data/rankhospital.R')
rankhospital("MN", "heart attack", 5000)
rankhospital("MD", "heart attack", "worst")
rankhospital("TX", "heart failure", 4)
submit()
submit()
submit()
submit()
setwd("~/Git/datasciencecoursera/R/rprog-data-ProgAssignment3-data")
source('~/Git/datasciencecoursera/R/rprog-data-ProgAssignment3-data/rankall.R')
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
submit()
submit()
submit()
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
swirl
swirl()
5+7
x <- 5 + 7
x
y <- x -3
y
z<-c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt<-sqrt(z -1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1, 2, 3, 4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
swirl()
install_from_swirl("R Programming")
swirl()
R.version.string
getOption("repos")
install.packages("swirl")
install.packages("swirl")
library(swirl)
swirl()
install_from_swirl("R Programming")
